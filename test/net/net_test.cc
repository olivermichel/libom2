
#include <catch.h>
#include <om/om.h>

using namespace om;

TEST_CASE("net", "[net]")
{
	unsigned char buf1[] = { // Ethernet + ARP
		0x00, 0x0c, 0x42, 0xa6, 0x25, 0xbc, 0x64, 0x4b, 0xf0, 0x01, 0x53, 0x5b, 0x08, 0x06, 0x00,
		0x01, 0x08, 0x00, 0x06, 0x04, 0x00, 0x02, 0x64, 0x4b, 0xf0, 0x01, 0x53, 0x5b, 0xac, 0x10,
		0x15, 0x05, 0x00, 0x0c, 0x42, 0xa6, 0x25, 0xbc, 0xac, 0x10, 0x15, 0x01
	};

	unsigned char buf2[] = { // Ethernet + IP + TCP
		0x64, 0x4b, 0xf0, 0x01, 0x53, 0x5b, 0x00, 0x0c, 0x42, 0xa6, 0x25, 0xbc, 0x08, 0x00, 0x45,
		0x20, 0x00, 0x6f, 0x8e, 0xff, 0x00, 0x00, 0x39, 0x06, 0x1c, 0x1a, 0x4a, 0x7d, 0xca, 0xbd,
		0xac, 0x10, 0x15, 0x05, 0x01, 0xbb, 0xec, 0x59, 0xec, 0x8c, 0x41, 0x9d, 0x5a, 0x10, 0x68,
		0x57, 0x80, 0x18, 0x01, 0x99, 0x97, 0x05, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x1d, 0xc5,
		0x2f, 0x57, 0x4a, 0x0e, 0x66, 0x9a
	};

	unsigned char buf3[] = { // Ethernet + IP + UDP
		0x64, 0x4b, 0xf0, 0x01, 0x53, 0x5b, 0x00, 0x0c, 0x42, 0xa6, 0x25, 0xbc, 0x08, 0x00, 0x45,
		0x00, 0x00, 0x54, 0x45, 0x18, 0x00, 0x00, 0x40, 0x11, 0xb3, 0x5a, 0xac, 0x10, 0x15, 0x01,
		0xac, 0x10, 0x15, 0x05, 0x00, 0x35, 0xdb, 0x39, 0x00, 0x40, 0x0f, 0x28
	};

	unsigned char buf4[] = { // Ethernet + IP + ICMP
		0x00, 0x0c, 0x42, 0xa6, 0x25, 0xbc, 0x64, 0x4b, 0xf0, 0x01, 0x53, 0x5b, 0x08, 0x00, 0x45,
		0x00, 0x00, 0x38, 0x54, 0x5f, 0x00, 0x00, 0x40, 0x01, 0xa4, 0x3f, 0xac, 0x10, 0x15, 0x05,
		0xac, 0x10, 0x15, 0x01, 0x03, 0x03, 0x09, 0x14, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00,
		0x68, 0x44, 0x42, 0x00, 0x00, 0x40, 0x11, 0xb4, 0x1c, 0xac, 0x10, 0x15, 0x01, 0xac, 0x10,
		0x15, 0x05, 0x00, 0x35, 0xf3, 0x5f, 0x00, 0x54, 0x00, 0x00
	};

	SECTION("parse an arp packet")
	{
		net::ethernet_header eth(buf1);
		CHECK(eth.ether_type() == 0x0806);
		CHECK(eth.len() == 14);

		net::arp_header arp(buf1 + eth.len());
		CHECK(arp.len() == 28);
	}

	SECTION("parse a tcp packet")
	{
		net::ethernet_header eth(buf2);
		CHECK(eth.ether_type() == 0x0800);
		CHECK(eth.len() == 14);

		net::ip4_header ip(buf2 + eth.len());
		CHECK(ip.proto() == 6);
		CHECK(ip.len() == 20);

		net::tcp_header tcp(buf2 + eth.len() + ip.len());
		CHECK(tcp.len() == 20);
	}

	SECTION("parse an udp packet")
	{
		net::ethernet_header eth(buf3);
		CHECK(eth.ether_type() == 0x0800);
		CHECK(eth.len() == 14);

		net::ip4_header ip(buf3 + eth.len());
		CHECK(ip.proto() == 17);
		CHECK(ip.len() == 20);

		net::udp_header udp(buf3 + eth.len() + ip.len());
		CHECK(udp.len() == 8);
	}

	SECTION("parse an icmp packet")
	{
		net::ethernet_header eth(buf4);
		CHECK(eth.ether_type() == 0x0800);
		CHECK(eth.len() == 14);

		net::ip4_header ip(buf4 + eth.len());
		CHECK(ip.proto() == 1);
		CHECK(ip.len() == 20);

		net::icmp_header icmp(buf4 + eth.len() + ip.len());
		CHECK(icmp.len() == 8);
	}
}
